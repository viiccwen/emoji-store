/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace EmojiStore {
  export type EmojiStruct = {
    id: PromiseOrValue<BigNumberish>;
    hexCode: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
  };

  export type EmojiStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    id: BigNumber;
    hexCode: string;
    description: string;
    price: BigNumber;
    owner: string;
    creator: string;
  };
}

export interface EmojiStoreInterface extends utils.Interface {
  functions: {
    "addEmoji(string,string,uint256)": FunctionFragment;
    "emojiIds(uint256)": FunctionFragment;
    "emojis(uint256)": FunctionFragment;
    "getEmoji(uint256)": FunctionFragment;
    "getEmojiCount()": FunctionFragment;
    "platformAddress()": FunctionFragment;
    "platformFeePercent()": FunctionFragment;
    "purchaseEmoji(uint256)": FunctionFragment;
    "updatePrice(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addEmoji"
      | "emojiIds"
      | "emojis"
      | "getEmoji"
      | "getEmojiCount"
      | "platformAddress"
      | "platformFeePercent"
      | "purchaseEmoji"
      | "updatePrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmoji",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emojiIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emojis",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmoji",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmojiCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseEmoji",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addEmoji", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emojiIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emojis", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEmoji", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmojiCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseEmoji",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;

  events: {
    "EmojiAdded(uint256,string,uint256,address)": EventFragment;
    "EmojiPurchased(uint256,address,address)": EventFragment;
    "PriceUpdated(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmojiAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmojiPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export interface EmojiAddedEventObject {
  id: BigNumber;
  hexCode: string;
  price: BigNumber;
  creator: string;
}
export type EmojiAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  EmojiAddedEventObject
>;

export type EmojiAddedEventFilter = TypedEventFilter<EmojiAddedEvent>;

export interface EmojiPurchasedEventObject {
  id: BigNumber;
  buyer: string;
  previousOwner: string;
}
export type EmojiPurchasedEvent = TypedEvent<
  [BigNumber, string, string],
  EmojiPurchasedEventObject
>;

export type EmojiPurchasedEventFilter = TypedEventFilter<EmojiPurchasedEvent>;

export interface PriceUpdatedEventObject {
  id: BigNumber;
  oldPrice: BigNumber;
  newPrice: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface EmojiStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EmojiStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addEmoji(
      hexCode: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emojiIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emojis(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string, string] & {
        id: BigNumber;
        hexCode: string;
        description: string;
        price: BigNumber;
        owner: string;
        creator: string;
      }
    >;

    getEmoji(
      emojiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[EmojiStore.EmojiStructOutput]>;

    getEmojiCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    platformAddress(overrides?: CallOverrides): Promise<[string]>;

    platformFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchaseEmoji(
      emojiId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      emojiId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addEmoji(
    hexCode: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emojiIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emojis(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, string, string] & {
      id: BigNumber;
      hexCode: string;
      description: string;
      price: BigNumber;
      owner: string;
      creator: string;
    }
  >;

  getEmoji(
    emojiId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<EmojiStore.EmojiStructOutput>;

  getEmojiCount(overrides?: CallOverrides): Promise<BigNumber>;

  platformAddress(overrides?: CallOverrides): Promise<string>;

  platformFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseEmoji(
    emojiId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    emojiId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addEmoji(
      hexCode: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emojiIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emojis(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string, string] & {
        id: BigNumber;
        hexCode: string;
        description: string;
        price: BigNumber;
        owner: string;
        creator: string;
      }
    >;

    getEmoji(
      emojiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<EmojiStore.EmojiStructOutput>;

    getEmojiCount(overrides?: CallOverrides): Promise<BigNumber>;

    platformAddress(overrides?: CallOverrides): Promise<string>;

    platformFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseEmoji(
      emojiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      emojiId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EmojiAdded(uint256,string,uint256,address)"(
      id?: null,
      hexCode?: null,
      price?: null,
      creator?: null
    ): EmojiAddedEventFilter;
    EmojiAdded(
      id?: null,
      hexCode?: null,
      price?: null,
      creator?: null
    ): EmojiAddedEventFilter;

    "EmojiPurchased(uint256,address,address)"(
      id?: null,
      buyer?: null,
      previousOwner?: null
    ): EmojiPurchasedEventFilter;
    EmojiPurchased(
      id?: null,
      buyer?: null,
      previousOwner?: null
    ): EmojiPurchasedEventFilter;

    "PriceUpdated(uint256,uint256,uint256)"(
      id?: null,
      oldPrice?: null,
      newPrice?: null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      id?: null,
      oldPrice?: null,
      newPrice?: null
    ): PriceUpdatedEventFilter;
  };

  estimateGas: {
    addEmoji(
      hexCode: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emojiIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emojis(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmoji(
      emojiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmojiCount(overrides?: CallOverrides): Promise<BigNumber>;

    platformAddress(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseEmoji(
      emojiId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrice(
      emojiId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEmoji(
      hexCode: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emojiIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emojis(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmoji(
      emojiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmojiCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseEmoji(
      emojiId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      emojiId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
